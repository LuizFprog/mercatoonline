services:
  # ===================================================================
  # 1. INFRAESTRUTURA
  # ===================================================================
  nats:
    image: nats:2.10-alpine
    container_name: nats_server
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - mercato_network

  user_db:
    image: postgres:15-alpine
    container_name: user_service_db
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: user_db
    ports:
      - "5432:5432"
    volumes:
      - user_pgdata:/var/lib/postgresql/data
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  product_db:
    image: postgres:15-alpine
    container_name: product_service_db
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: product_db
    ports:
      - "5433:5432"
    volumes:
      - product_pgdata:/var/lib/postgresql/data
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  store_db:
    image: postgres:15-alpine
    container_name: store_service_db
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: store_db
    ports:
      - "5437:5432"
    volumes:
      - store_pgdata:/var/lib/postgresql/data
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d store_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  order_db:
    image: postgres:15-alpine
    container_name: order_service_db
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: order_db
    ports:
      - "5434:5432"
    volumes:
      - order_pgdata:/var/lib/postgresql/data
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  cart_db:
    image: postgres:15-alpine
    container_name: cart_service_db
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: cart_db # Nome do banco de dados
    ports:
      - "5438:5432" # Expõe a porta 5438 na sua máquina
    volumes:
      - cart_pgdata:/var/lib/postgresql/data
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker -d cart_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================================================
  # 2. MICROSSERVIÇOS
  # ===================================================================
  user-service:
    build:
      context: ./user-service
    container_name: user_service_app
    environment:
      DATABASE_URL: "postgresql://docker:docker@user_db:5432/user_db?schema=public"
    command: sh -c "npx prisma migrate reset --force && node dist/main"
    depends_on:
      user_db:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  product-service:
    build:
      context: ./product-service
    container_name: product_service_app
    environment:
      DATABASE_URL: "postgresql://docker:docker@product_db:5432/product_db?schema=public"
    command: sh -c "npx prisma migrate reset --force --skip-seed && node dist/main"
    depends_on:
      product_db:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  store-service:
    build:
      context: ./store-service
    container_name: store_service_app
    environment:
      DATABASE_URL: "postgresql://docker:docker@store_db:5432/store_db?schema=public"
      JWT_SECRET: "SEU_SEGREDO_SUPER_SECRETO_AQUI"
    # Este comando força a recriação do banco a partir do zero
    command: sh -c "npx prisma migrate reset --force --skip-seed && node dist/main"
    depends_on:
      store_db:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  order-service:
    build:
      context: ./order-service
    container_name: order_service_app
    environment:
      DATABASE_URL: "postgresql://docker:docker@order_db:5432/order_db?schema=public"
    command: sh -c "npx prisma migrate reset --force --skip-seed && node dist/main"
    depends_on:
      order_db:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  cart-service:
    build:
      context: ./cart-service
    container_name: cart_service_app
    environment:
      DATABASE_URL: "postgresql://docker:docker@cart_db:5432/cart_db?schema=public"
    command: sh -c "npx prisma migrate reset --force --skip-seed && node dist/main"
    depends_on:
      cart_db:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - mercato_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  notification-service:
    build:
      context: ./notification-service
    container_name: notification_service_app
    depends_on:
      nats:
        condition: service_started
    networks:
      - mercato_network

  # ===================================================================
  # 3. API GATEWAY
  # ===================================================================
  api-gateway:
    build:
      context: ./api-gateway
    container_name: api_gateway_app
    ports:
      - "4001:3000"
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      store-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
    networks:
      - mercato_network

# ===================================================================
# 4. VOLUMES E REDES
# ===================================================================
volumes:
  user_pgdata:
  product_pgdata:
  order_pgdata:
  store_pgdata:
  cart_pgdata:

networks:
  mercato_network:
    driver: bridge